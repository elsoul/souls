#!/usr/bin/env ruby
require "souls"
begin
  require("./config/souls") unless ARGV[0] == "new" || ARGV[0] == "i" || ARGV[0] == "-v" || ARGV[0] == "deploy"
rescue StandardError
  puts("Make sure you are at SOULs APP directory!")
end
begin
  souls_command = ARGV[0]
  case souls_command
  when "new"
    STRAINS = %w[api worker console admin media doc].freeze
    app_name = ARGV[1]
    if app_name.nil?
      puts(Paint["you need to specify your app name", :red])
      puts(Paint["`souls new app_name`", :yellow])
      exit
    end

    prompt = TTY::Prompt.new
    choices = [
      "1. SOULs GraphQL API",
      "2. SOULs Pub/Sub Worker",
      "3. SOULs Console Web",
      "4. SOULs Admin Web",
      "5. SOULs Media Web",
      "6. SOULs Doc Web"
    ]
    choice_num = prompt.select(Paint["Select Strain: ", :cyan], choices)[0].to_i
    case choice_num
    when 1, 2
      service_name = (STRAINS[choice_num.to_i - 1]).to_s
      Souls::Init.download_souls(app_name: app_name, service_name: service_name)
      Souls::Init.initial_config_init(app_name: app_name, service_name: service_name)
    else
      puts(Paint["Coming Soon...", :blue])
    end
  when "s", "server"
    strain = Souls.configuration.strain
    case strain
    when "media", "admin", "console", "doc"
      system("yarn dev")
    else
      system("foreman start -f Procfile.dev")
    end
  when "c", "console"
    strain = Souls.configuration.strain
    case strain
    when "media", "admin", "console", "doc"
      system("yarn dev")
    else
      rack_env = ARGV[1]
      case rack_env
      when "RACK_ENV=production"
        system("RACK_ENV=production bundle exec irb")
      else
        system("bundle exec irb")
      end
    end
  when "i", "infra"
    send_method = ARGV[1]
    Souls.public_send(send_method)
  when "gcloud"
    args = ARGV
    status = Paint["Running Gcloud Commands...", :yellow]
    Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
      Whirly.status = status
      Souls::Gcloud.return_method(args)
      Whirly.status = "Done!"
    end
  when "-v", "--version"
    puts(Paint[Souls::VERSION, :white])
  when "gem:update", "gemfile:update"
    status = Paint["Checking for updates...", :yellow]
    Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
      Whirly.status = status
      Souls.update_gemfile
      Whirly.status = "Done!"
    end
  when "release"
    system("gem install souls")
    sleep(3)
    current_souls_ver = Souls::VERSION.strip.split(".").map(&:to_i)
    prompt = TTY::Prompt.new
    choices = [
      "1. Patch(#{Souls.version_detector(current_ver: current_souls_ver, update_kind: 'patch')})",
      "2. Minor(#{Souls.version_detector(current_ver: current_souls_ver, update_kind: 'minor')})",
      "3. Major(#{Souls.version_detector(current_ver: current_souls_ver, update_kind: 'major')})"
    ]
    choice_num = prompt.select("Select Version: ", choices)[0].to_i
    update_kinds = %w[patch minor major]
    update_kind = update_kinds[choice_num - 1]
    souls_new_ver = Souls.version_detector(current_ver: current_souls_ver, update_kind: update_kind)

    status = Paint["Saving Repo...", :yellow]
    Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
      Whirly.status = status
      %w[api worker].each do |s_name|
        result = Paint[Souls.update_repo(service_name: s_name, update_kind: update_kind), :green]
        Whirly.status = result
      end
      Souls.overwrite_version(new_version: souls_new_ver)
      puts("before add")
      system("git add .")
      puts("before commit")
      system("git commit -m 'souls update v#{souls_new_ver}'")
      puts("before build")
      system("rake build")
      system("rake release")
      Whirly.status = Paint["soul-v#{souls_new_ver} successfully updated!"]
    end
  when "update"
    puts(Paint["Coming soon..", :cyan])
  when "add"
    graphql_class = ARGV[1]
    case graphql_class
    when "mutation"
      Souls::Init.add_mutation(class_name: "user", file_name: "hoi")
    when "type"
      Souls::Init.add_type(class_name: "user", file_name: "hoi")
    when "connection"
      Souls::Init.add_connection(class_name: "user", file_name: "hoi")
    when "edge"
      Souls::Init.add_edge(class_name: "user", file_name: "hoi")
    when "rspec_mutation"
      Souls::Init.add_rspec_mutation(class_name: "user", file_name: "hoi")
    else
      puts(Paint["Wrong Argument!", :red])
    end
  when "g", "generate"
    args = ARGV
    status = Paint["Generating Files...", :yellow]
    done = Paint["Generated SOULs CRUD Files☻", :yellow]
    Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
      Whirly.status = status
      Souls::Generate.return_method(args)
      Whirly.status = done
    end
  when "d", "delete"
    class_name = ARGV[1]
    Souls::Generate.delete_all(class_name: class_name)
  when "db:create"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:create RACK_ENV=production")
    else
      system("rake db:create && rake db:create RACK_ENV=test")
    end
  when "db:migrate"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:migrate RACK_ENV=production")
    else
      system("rake db:migrate && rake db:migrate RACK_ENV=test")
    end
  when "db:seed"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:seed RACK_ENV=production")
    else
      system("rake db:seed")
    end
  when "db:migrate:reset"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:migrate:reset RACK_ENV=production DISABLE_DATABASE_ENVIRONMENT_CHECK=1")
    else
      system("rake db:migrate:reset && rake db:migrate:reset RACK_ENV=test")
    end
  when "db:update"
    strain = Souls.configuration.strain
    case strain
    when "api"
      other_app = Souls.configuration.worker_name
    when "worker"
      other_app = Souls.configuration.api_name
    else
      raise(StandardError, "Unknown app name!")
    end
    system("rm -rf ../#{other_app}/db/*")
    system("cp -r ./db/* ../#{other_app}/db/*")
  when "t", "test"
    system("rubocop -a")
    system("bundle exec rspec")
  when "run"
    system("docker build . -t souls -f Dockerfile.dev")
    system("docker run --rm --env-file .env -p 3000:3000 souls:latest")
  when "deploy"
    project_id = Souls.configuration.project_id
    system("gcloud builds submit --config=cloudbuild.yml --project #{project_id}")
  else
    puts(Paint["Welcome to SOULs!", :green])
  end
rescue StandardError => e
  puts(Paint[e, :red])
end
