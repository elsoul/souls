#!/usr/bin/env ruby
require "souls"
begin
  souls_command = ARGV[0]
  require("./config/souls") unless ["new", "i", "-v", "deploy"].include?(souls_command)
rescue StandardError
  puts("Make sure you are at SOULs APP directory!")
end
begin
  case souls_command
  when "api"
    api_command = ARGV[1]
    case api_command
    when "generate", "g"
      method_name = ARGV[2]
      class_name = ARGV[3]
      status = Paint["Running SOULs Generate Commands...", :yellow]
      Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
        Whirly.status = status
        Souls::Api::Generate.public_send(method_name, class_name: class_name)
        Whirly.status = "Done!"
      end
    when "schema:update"
      # update command
    else
      puts(Paint["Comannd doesn't exist.Check you command again!...", :red])
    end
  when "worker"
    api_command = ARGV[1]
    case api_command
    when "generate", "g"
      method_name = ARGV[2]
      class_name = ARGV[3]
      args = { class_name: class_name }
      args[:option] = ARGV[4] if ARGV.size > 4
      status = Paint["Running SOULs Generate Commands...", :yellow]
      Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
        Whirly.status = status
        Souls::Worker::Generate.public_send(method_name, **args)
        Whirly.status = "Done!"
      end
    else
      puts(Paint["Comannd doesn't exist.Check you command again!...", :red])
    end
  when "new"
    args = ARGV
    Souls::Init.start(args)
  when "s", "server"
    system("foreman start -f Procfile.dev")
  when "c", "console"
    strain = Souls.configuration.strain
    case strain
    when "media", "admin", "console", "doc"
      system("yarn dev")
    else
      rack_env = ARGV[1]
      case rack_env
      when "RACK_ENV=production"
        system("RACK_ENV=production bundle exec irb")
      else
        system("bundle exec irb")
      end
    end
  when "i", "infra", "docker"
    send_method = ARGV[1]
    Souls::Docker.public_send(send_method)
  when "gcloud"
    args = ARGV
    status = Paint["Running Gcloud Commands...", :yellow]
    Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
      Whirly.status = status
      Souls::Gcloud.return_method(args)
      Whirly.status = "Done!"
    end
  when "-v", "--version", "v", "version", "-version", "--v"
    puts(Paint[Souls::VERSION, :white])
  when "gem:update", "gemfile:update"
    status = Paint["Checking for updates...", :yellow]
    Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
      Whirly.status = status
      Souls.update_gemfile
      Whirly.status = "Done!"
    end
  when "release"
    Souls::Release.gem_release
  when "model:update"
    status = Paint["Syncing Models...", :yellow]
    Whirly.start(spinner: "clock", interval: 420, stop: "🎉") do
      Whirly.status = status
      Souls.update_models
      Whirly.status = "API and Worker Both Models Synced!"
    end
  when "add"
    graphql_class = ARGV[1]
    case graphql_class
    when "mutation"
      Souls::Init.add_mutation(class_name: "user", file_name: "hoi")
    when "type"
      Souls::Init.add_type(class_name: "user", file_name: "hoi")
    when "connection"
      Souls::Init.add_connection(class_name: "user", file_name: "hoi")
    when "edge"
      Souls::Init.add_edge(class_name: "user", file_name: "hoi")
    when "rspec_mutation"
      Souls::Init.add_rspec_mutation(class_name: "user", file_name: "hoi")
    else
      puts(Paint["Wrong Argument!", :red])
    end
  when "g", "generate"
    g_command = ARGV[1]
    case g_command
    when "worker"
      Souls::Init.download_worker
    else
      puts(Paint["Coming Soon...", :green])
    end
  when "d", "delete"
    class_name = ARGV[1]
    Souls::Api::Generate.delete_all(class_name: class_name)
  when "db:create"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:create RACK_ENV=production")
    else
      system("rake db:create && rake db:create RACK_ENV=test")
    end
  when "db:migrate"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:migrate RACK_ENV=production")
    else
      system("rake db:migrate && rake db:migrate RACK_ENV=test")
    end
  when "db:seed"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:seed RACK_ENV=production")
    else
      system("rake db:seed")
    end
  when "db:migrate:reset"
    rack_env = ARGV[1]
    case rack_env
    when "RACK_ENV=production"
      system("rake db:migrate:reset RACK_ENV=production DISABLE_DATABASE_ENVIRONMENT_CHECK=1")
    else
      system("rake db:migrate:reset && rake db:migrate:reset RACK_ENV=test")
    end
  when "t", "test"
    system("rubocop -A")
    system("bundle exec rspec")
  when "run"
    system("docker build . -t souls -f Dockerfile.dev")
    system("docker run --rm --env-file .env -p 3000:3000 souls:latest")
  when "deploy"
    project_id = Souls.configuration.project_id
    system("gcloud builds submit --config=cloudbuild.yml --project #{project_id}")
  else
    puts(Paint["Welcome to SOULs!", :green])
  end
rescue StandardError => e
  puts(e.backtrace)
  puts(Paint[e, :red])
end
