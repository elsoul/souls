puts Souls::VERSION
Souls::Init.config
Souls::Init.config
Souls:
Souls::VERSION
Souls::Init
Souls::Init
Souls::Init
module Souls\
  module Init\
    class << self\
      def config\
        FileUtils.mkdir_p "config" unless FIle.directory? "config"\
        file_path = "config/initialize.rb"\
        File.open(file_path, "a") do |f|\
          f.write <<~EOS\
          Souls.configure do |config|\
          config.project_id = "elsoul2"\
          config.app = "grpc-td-cluster"\
          config.network = "default"\
          config.machine_type = "custom-1-6656"\
          config.zone = "us-central1-a"\
          config.domain = "el-soul.com"\
          config.google_application_credentials = "./config/credentials.json"\
          end\
          EOS\
          end\
          file_path = ".irbrc"\
          File.open(file_path, "a") do |f|\
            f.write <<~EOS\
            require "yaml"\
            require "erb"\
            require "active_record"\
            require "logger"\
            \
            $LOAD_PATH << "#{Dir.pwd}/app/services"\
            \
            Dir[File.expand_path "app/*.rb"].each do |file|\
            require file\
            end\
            \
            db_conf = YAML.safe_load(ERB.new(File.read("./config/database.yml")).result)\
            ActiveRecord::Base.establish_connection(db_conf)\
            Dir[File.expand_path "./app/controllers/*.rb"].sort.each do |file|\
            require file\
            end\
            EOS\
            end\
            puts "Update Your Config in `./config/initializer.rb` \n and \n Souls All Set!!"\
      end\
    end\
  end\
end
Souls::Init
require "souls/init"
pwd
pwws
require "souls/init"
Souls::Init
Souls::Init.config
Souls::Init.config
Souls::Init
require "souls"
Souls
Souls::Init
Souls::Init
require 'souls'
require 'souls'
Souls.class
Souls.ancestors
Souls.config
Souls::Init
module Souls\
  module Init\
    class << self\
      def config\
        FileUtils.mkdir_p "config" unless FIle.directory? "config"\
        file_path = "config/initialize.rb"\
        File.open(file_path, "a") do |f|\
          f.write <<~EOS\
          Souls.configure do |config|\
          config.project_id = "elsoul2"\
          config.app = "grpc-td-cluster"\
          config.network = "default"\
          config.machine_type = "custom-1-6656"\
          config.zone = "us-central1-a"\
          config.domain = "el-soul.com"\
          config.google_application_credentials = "./config/credentials.json"\
          end\
          EOS\
          end\
          file_path = ".irbrc"\
          File.open(file_path, "a") do |f|\
            f.write <<~EOS\
            require "yaml"\
            require "erb"\
            require "active_record"\
            require "logger"\
            \
            $LOAD_PATH << "#{Dir.pwd}/app/services"\
            \
            Dir[File.expand_path "app/*.rb"].each do |file|\
            require file\
            end\
            \
            db_conf = YAML.safe_load(ERB.new(File.read("./config/database.yml")).result)\
            ActiveRecord::Base.establish_connection(db_conf)\
            Dir[File.expand_path "./app/controllers/*.rb"].sort.each do |file|\
            require file\
            end\
            EOS\
            end\
            puts "Update Your Config in `./config/initializer.rb` \n and \n Souls All Set!!"\
      end\
    end\
  end\
end
Souls::Init
Souls::Init
Souls::Init.config 1
Souls::Init.config mode: 1
Souls::Init.config mode: 1
Souls::Init.config mode: 2
Souls::Init.config mode: 3
a = 1
puts 3 if a != 1
puts 3 if a != 3
puts 3 if a != 2
puts "ok" if a != 3 || a != 4
a = 3
puts "ok" if a != 3 || a != 4
a = 1
b = 2
c = 3
puts "h" if a.include?(1..2)
puts "h" if a.include?(1..2)
a
v
a
b
c
a.in? [2..3]
a.in?([2..3])
a = "1"
a.in?(["1", "2"])
a = 1
a.include? 2
require "active_support"
require "active_support/all"
in?
a.in? 2
a.in? 1
a.in?([1, 2])
a.in?([1..2])
a
a.in?([1...2])
puts [1..3]
%w(1..4)
%q(1..4)
[1..5].to_a
(1..4).to_a
a = "v0.0.1"
a.delete "v\
"
a
a.delete! "v"
a
a = (1..4).to_a
a
a.include? 2
[1..3].include? 2
[1..3].include? 1
(1..3).include? 1
[*1..3].include? 1
(1..3\
)
(1..3)
(1..3).to_a
(1..3).include? 2
(1..3).include? 3
(1..3).to_a
(1..3).to_s
[1..3][0].include? 2
[1..3].include? 2
[1..3].include? 1..2
[1..3].include? 1..3
[1..3].in? 1..2
[1..2].in? 1..3
[1..2].in? 1..2
1..2 == 1..2
a = 1..2
b = 1..2
a == b
a === b
a = 1
a.in? 2
a.in? 1
a.include? 1
a.include? 1
a = (1..3)
a.include? 2
a.in? 2
a = "repository_name"
a.capitalize
puts __dir__
Souls.configuration.app
Souls
Souls.configuration
Souls.configure do |config|\
  config.project_id = "sdf"\
  config.app = "sdf"\
  config.network = "sdf"\
  config.machine_type = "sdf"\
  config.zone = "sdf"\
  config.domain = "sdf"\
  config.google_application_credentials = "sdf"\
  config.souls_mode = "Client"\
  config.proto_package_name = "souls"\
end
Souls.configure do |config|\
  config.project_id = "sdf"\
  config.app = "sdf"\
  config.network = "sdf"\
  config.machine_type = "sdf"\
  config.zone = "sdf"\
  config.domain = "sdf"\
  config.google_application_credentials = "sdf"\
  config.strain = "Client"\
  config.proto_package_name = "souls"\
end
Souls.configuration
Souls.configure do |config|\
  config.project_id = "sdf"\
  config.app = "sdf"\
  config.network = "sdf"\
  config.machine_type = "sdf"\
  config.zone = "sdf"\
  config.domain = "sdf"\
  config.google_application_credentials = "sdf"\
  config.strain = "Client"\
  config.proto_package_name = "souls"\
end
Souls.configuration
Souls.configuration.app
Souls.configuration.strain
Souls.configuration.strain
Souls.configuration.strain
Souls::STRAINS
Souls::STRAINS[0]
ARGV[0] = "ne"
ARGV[0] = "new"
require "./config/initializers/souls" unless ARGV[0] == "new"
ARGV[0] = "ne"
require "./config/initializers/souls" unless ARGV[0] == "new"
require "./config/initializers/souls" unless ARGV[0] == "new"
zones = {\
          us: "gcr.io",\
          eu: "eu.gcr.io",\
          asia: "asia.gcr.io"\
}
zones
zones[:asia]
def t zone: :us\
  puts @zones[zone]\
end
@zones = {\
          us: "gcr.io",\
          eu: "eu.gcr.io",\
          asia: "asia.gcr.io"\
}
t
t zone: :asia
Souls
Souls::Init
Souls::Ini
Souls::Init
Souls
Souls::Init
def t version: "latest", zone: :asia\
  puts version\
end
t
t version: "hey"
t version: "0.0.1"
app = Souls.configuration.app
Souls.configuration
Souls.configuration.app = "elquest"
app = "elquest-api"
def get_ip\
  puts system("kubectl get ingress --namespace elquest-api | grep #{app} | awk '{print $3}'")\
end
get_ip
app
@app = "elquest-api"
def get_ip\
  puts system("kubectl get ingress --namespace elquest-api | grep #{@app} | awk '{print $3}'")\
end
get_ip
def get_ip\
        file_path = "./dns.txt"\
        File.open(file_path, "w") do |f|\
          f.write system("kubectl get ingress --namespace elquest-api | grep elquest | awk '{print $3}'")\
        end\
      end
get_ip
def get_ip\
        system "IP=$(kubectl get ingress --namespace elquest-api | grep elquest | awk '{print $3}')"\
        system "echo $IP"\
end
get_ip
def get_ip\
        system "IP=$(kubectl get ingress --namespace elquest-api | grep elquest | awk '{print $3}')"\
        system "echo $IP"\
end
get_ip
puts $IP
def get_ip\
        system "IP=$(kubectl get ingress --namespace elquest-api | grep elquest | awk '{print $3}') && echo 'elquest-api.el-soul.com. 300 IN A ${IP}' >> dns"\
      end
get_ip
def get_ip\
        system "IP=$(kubectl get ingress --namespace elquest-api | grep elquest | awk '{print $3}') && echo `elquest-api.el-soul.com. 300 IN A ${IP}` >> dns"\
      end
get_ip
def get_ip\
        system "IP=$(kubectl get ingress --namespace elquest-api | grep elquest | awk '{print $3}') && `echo elquest-api.el-soul.com. 300 IN A ${IP}` >> dns"\
      end
get_ip
def get_ip\
        `echo "elquest-api.el-soul.com. 300 IN A $(kubectl get ingress --namespace elquest-api | grep elquest | awk '{print $3}')" >> dns`\
      end
get_ip
get_ip
Souls.export_network_group
Souls.export_network_group
Souls.configure do |config|\
  config.project_id = "elsoul"\
  config.app = "elquest-api"\
  config.network = "elsoul"\
  config.machine_type = "elsoul"\
  config.zone = "elsoul"\
  config.domain = "elsoul"\
  config.google_application_credentials = "./config/credentials.json"\
  config.strain = "api"\
  config.proto_package_name = "souls"\
end
app = Souls.configuration.app
system "NEG_NAME=$(gcloud compute network-endpoint-groups list | grep #{app} | awk '{print $1}')"
puts $NEG_NAME
      def export_network_group\
        app = Souls.configuration.app\
        system "NEG_NAME=$(gcloud compute network-endpoint-groups list | grep #{app} | awk '{print $1}')"\
        `echo $NEG_NAME >> .neg_name`\
      end
export_network_group
Souls.configure do |config|\
  config.project_id = "elsoul"\
  config.app = "blog-service"\
  config.network = "elsoul"\
  config.machine_type = "elsoul"\
  config.zone = "elsoul"\
  config.domain = "elsoul"\
  config.google_application_credentials = "./config/credentials.json"\
  config.strain = "api"\
  config.proto_package_name = "souls"\
end
export_network_group
file = ".neg_name"
File.open(file, "r") do |f|\
  f.each_line do |l|\
    puts l\
  end\
end
File.open(file, "r") do |f|\
  f.each_line.with_index do |l,i|\
    puts l\
  end\
end
File.open(file, "r") do |f|\
  f.each_line.with_index do |l,i|\
    puts l && puts i\
  end\
end
File.open(file, "r") do |f|\
  f.each_line.with_index do |l,i|\
    puts l && exit\
  end\
end
ィ江l
file = ".neg_name"
File.open(file) do |f|\
  puts f.gets\
end
firestore = Google::Cloud::Firestore.new
